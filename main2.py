import os
from dotenv import load_dotenv
import telebot
import time
import db
from datetime import datetime

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("TOKEN")
if not TOKEN:
    raise RuntimeError("–í .env —Ñ–∞–π–ª–µ –Ω–µ—Ç TOKEN")

bot = telebot.TeleBot(TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
db.init_db()


@bot.message_handler(commands=['start'])
def start(message):
    welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!

–Ø –±–æ—Ç –¥–ª—è –∑–∞–º–µ—Ç–æ–∫. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
–í—Å–µ —Ç–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ —Ç–µ–±–µ.

–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.
"""
    bot.reply_to(message, welcome_text)


@bot.message_handler(commands=['help'])
def help_cmd(message):
    help_text = """
üìù **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**

/note\_add `<—Ç–µ–∫—Å—Ç>` - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
/note\_list - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏
/note\_find `<–∑–∞–ø—Ä–æ—Å>` - –ù–∞–π—Ç–∏ –∑–∞–º–µ—Ç–∫—É
/note\_show `<id>` - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—É—é –∑–∞–º–µ—Ç–∫—É
/note\_edit `<id>` `<–Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç>` - –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
/note\_del `<id>` - –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É

üí° **–ü—Ä–∏–º–µ—Ä—ã:**
/note\_add –ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ
/note\_find –º–æ–ª–æ–∫–æ
/note\_edit 5 –ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ –∏ —Ö–ª–µ–±
/note\_del 5
"""
    bot.reply_to(message, help_text, parse_mode='Markdown')


@bot.message_handler(commands=['note_add'])
def note_add(message):
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2 or not parts[1].strip():
        bot.reply_to(message, "‚ùå –§–æ—Ä–º–∞—Ç: /note_add <—Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏>")
        return

    text = parts[1].strip()

    try:
        note_id = db.add_note(message.from_user.id, text)
        bot.reply_to(message, f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ #{note_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n\n{text}")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: {str(e)}")


@bot.message_handler(commands=['note_list'])
def note_list(message):
    try:
        notes = db.list_notes(message.from_user.id)

        if not notes:
            bot.reply_to(message, "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /note_add <—Ç–µ–∫—Å—Ç> –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")
            return

        response = f"üìã **–í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏** (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(notes)}):\n\n"

        for note in notes:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            created_at = datetime.fromisoformat(note['created_at']).strftime('%d.%m.%Y %H:%M')
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞
            text = note['text']
            display_text = text[:50] + "..." if len(text) > 50 else text
            response += f"#{note['id']} _{created_at}_\n{display_text}\n\n"

        # Telegram –∏–º–µ–µ—Ç –ª–∏–º–∏—Ç –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(response) > 4000:
            response = response[:3900] + "\n\n... _—Å–ø–∏—Å–æ–∫ –æ–±—Ä–µ–∑–∞–Ω_"

        bot.reply_to(message, response, parse_mode='Markdown')
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–æ–∫: {str(e)}")


@bot.message_handler(commands=['note_find'])
def note_find(message):
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        bot.reply_to(message, "‚ùå –§–æ—Ä–º–∞—Ç: /note_find <–ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å>")
        return

    query = parts[1].strip()

    try:
        notes = db.find_notes(message.from_user.id, query)

        if not notes:
            bot.reply_to(message, f"üîç –ó–∞–º–µ—Ç–∫–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        response = f"üîç **–ù–∞–π–¥–µ–Ω–æ –∑–∞–º–µ—Ç–æ–∫:** {len(notes)}\n–ü–æ –∑–∞–ø—Ä–æ—Å—É: _{query}_\n\n"

        for note in notes:
            created_at = datetime.fromisoformat(note['created_at']).strftime('%d.%m.%Y %H:%M')
            text = note['text']
            # –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            display_text = text[:100] + "..." if len(text) > 100 else text
            response += f"#{note['id']} _{created_at}_\n{display_text}\n\n"

        if len(response) > 4000:
            response = response[:3900] + "\n\n... _—Å–ø–∏—Å–æ–∫ –æ–±—Ä–µ–∑–∞–Ω_"

        bot.reply_to(message, response, parse_mode='Markdown')
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")


@bot.message_handler(commands=['note_show'])
def note_show(message):
    parts = message.text.split()
    if len(parts) < 2:
        bot.reply_to(message, "‚ùå –§–æ—Ä–º–∞—Ç: /note_show <id>")
        return

    try:
        note_id = int(parts[1])
    except ValueError:
        bot.reply_to(message, "‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    try:
        note = db.get_note_by_id(message.from_user.id, note_id)

        if note:
            created_at = datetime.fromisoformat(note['created_at']).strftime('%d.%m.%Y %H:%M')
            response = f"üìù **–ó–∞–º–µ—Ç–∫–∞ #{note['id']}**\n"
            response += f"_–°–æ–∑–¥–∞–Ω–∞: {created_at}_\n\n"
            response += note['text']
            bot.reply_to(message, response, parse_mode='Markdown')
        else:
            bot.reply_to(message, f"‚ùå –ó–∞–º–µ—Ç–∫–∞ #{note_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@bot.message_handler(commands=['note_edit'])
def note_edit(message):
    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        bot.reply_to(message, "‚ùå –§–æ—Ä–º–∞—Ç: /note_edit <id> <–Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç>")
        return

    try:
        note_id = int(parts[1])
        new_text = parts[2].strip()
    except ValueError:
        bot.reply_to(message, "‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    if not new_text:
        bot.reply_to(message, "‚ùå –¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    try:
        if db.update_note(message.from_user.id, note_id, new_text):
            bot.reply_to(message, f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ #{note_id} –∏–∑–º–µ–Ω–µ–Ω–∞:\n\n{new_text}")
        else:
            bot.reply_to(message, f"‚ùå –ó–∞–º–µ—Ç–∫–∞ #{note_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")


@bot.message_handler(commands=['note_del'])
def note_del(message):
    parts = message.text.split()
    if len(parts) < 2:
        bot.reply_to(message, "‚ùå –§–æ—Ä–º–∞—Ç: /note_del <id>")
        return

    try:
        note_id = int(parts[1])
    except ValueError:
        bot.reply_to(message, "‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    try:
        if db.delete_note(message.from_user.id, note_id):
            bot.reply_to(message, f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ #{note_id} —É–¥–∞–ª–µ–Ω–∞.")
        else:
            bot.reply_to(message, f"‚ùå –ó–∞–º–µ—Ç–∫–∞ #{note_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}")


@bot.message_handler(func=lambda message: True)
def echo_all(message):
    bot.reply_to(message, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")


if __name__ == "__main__":
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    print(f"üìÅ –ü—É—Ç—å –∫ –ë–î: {os.getenv('DB_PATH', 'bot.db')}")
    print("üì° –ù–∞—á–∏–Ω–∞—é –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")

    while True:
        try:
            bot.polling(none_stop=True, interval=0, timeout=20)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            time.sleep(5)